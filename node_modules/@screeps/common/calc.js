const _ = require('lodash'),
    C = require('./lib/constants');

const rawResources = [
    C.RESOURCE_UTRIUM,
    C.RESOURCE_LEMERGIUM,
    C.RESOURCE_ZYNTHIUM,
    C.RESOURCE_KEANIUM,
    C.RESOURCE_OXYGEN,
    C.RESOURCE_HYDROGEN,
    C.RESOURCE_CATALYST,
    C.RESOURCE_GHODIUM,
    C.RESOURCE_POWER,
    C.RESOURCE_ENERGY,
    C.RESOURCE_BIOMASS,
    C.RESOURCE_MIST,
    C.RESOURCE_SILICON,
    C.RESOURCE_METAL
];

const topLevel = _.filter(_.map(C.COMMODITIES, (v,k)=>_.merge({resourceType:k},v)), c => c.level == 5);

const totalResources = function(resourceType, amount) {
    //console.log(`${amount} of ${resourceType}`);
    let result = {[resourceType]: amount};
    if(C.COMMODITIES[resourceType] && !_.contains(rawResources, resourceType)) {
        _.forEach(C.COMMODITIES[resourceType].components, (a, component) => {
            result = _.merge(result, totalResources(component, a*amount/C.COMMODITIES[resourceType].amount), (a,b) => (a||0)+b);
        });
    }

    return result;
};

//console.log(JSON.stringify(totalResources(C.RESOURCE_ORGANISM, 1), null, 2));
//_.forEach(topLevel, c => console.log(`${c.resourceType}: ${JSON.stringify(totalResources(c.resourceType, 1), null,2)}`));
console.log(`${totalResources(C.RESOURCE_DEVICE, 1)['energy']}\t${totalResources(C.RESOURCE_ORGANISM, 1)['energy']}\t${totalResources(C.RESOURCE_MACHINE, 1)['energy']}\t${totalResources(C.RESOURCE_ESSENCE, 1)['energy']}`);
