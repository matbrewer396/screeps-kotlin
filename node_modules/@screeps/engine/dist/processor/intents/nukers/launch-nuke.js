'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ = require('lodash'),
    config = require('../../../config'),
    utils = require('../../../utils'),
    driver = utils.getDriver(),
    C = driver.constants;

module.exports = function (object, intent, { roomObjects, bulk, roomController, gameTime, roomInfo }) {

    if (!utils.checkStructureAgainstController(object, roomObjects, roomController)) {
        return;
    }
    if (object.store.G < object.storeCapacityResource.G || object.store.energy < object.storeCapacityResource.energy) {
        return;
    }
    if (object.cooldownTime > gameTime) {
        return;
    }
    if (intent.x < 0 || intent.y < 0 || intent.x > 49 || intent.y > 49) {
        return;
    }
    if (roomInfo.novice && roomInfo.novice > Date.now() || roomInfo.respawnArea && roomInfo.respawnArea > Date.now()) {
        return;
    }

    if (!_.isString(intent.roomName) || !/^(W|E)\d+(S|N)\d+$/.test(intent.roomName)) {
        return;
    }

    var _utils$roomNameToXY = utils.roomNameToXY(intent.roomName),
        _utils$roomNameToXY2 = _slicedToArray(_utils$roomNameToXY, 2),
        tx = _utils$roomNameToXY2[0],
        ty = _utils$roomNameToXY2[1];

    var _utils$roomNameToXY3 = utils.roomNameToXY(object.room),
        _utils$roomNameToXY4 = _slicedToArray(_utils$roomNameToXY3, 2),
        x = _utils$roomNameToXY4[0],
        y = _utils$roomNameToXY4[1];

    if (Math.abs(tx - x) > C.NUKE_RANGE || Math.abs(ty - y) > C.NUKE_RANGE) {
        return;
    }

    bulk.update(object, {
        store: { energy: 0, G: 0 },
        cooldownTime: gameTime + (config.ptr ? 100 : C.NUKER_COOLDOWN)
    });

    bulk.insert({
        type: 'nuke',
        room: intent.roomName,
        x: intent.x,
        y: intent.y,
        landTime: gameTime + (config.ptr ? 100 : C.NUKE_LAND_TIME),
        launchRoomName: object.room
    });
};
//# sourceMappingURL=../../../sourcemaps/processor/intents/nukers/launch-nuke.js.map
